{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Messages from Kafka:\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, message => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: message.id\n    }, _toDisplayString(message.value), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","messages","message","key","id","value"],"sources":["D:\\Project\\VUEJSSPRING_CRUD_JWT\\vue-crud-api-jwt-vuex\\src\\views\\Monitor.vue"],"sourcesContent":["// Vue.js component\r\n<template>\r\n  <div>\r\n    <h1>Messages from Kafka:</h1>\r\n    <ul>\r\n      <li v-for=\"message in messages\" :key=\"message.id\">\r\n        {{ message.value }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Consumer } from 'kafka-node';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      messages: [],\r\n      consumer: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    // Create Kafka consumer\r\n    const client = new kafka.KafkaClient({ kafkaHost: 'localhost:9092' });\r\n    const topics = [{ topic: 'mytopic3' }];\r\n    const options = { groupId: 'mygroup' };\r\n    this.consumer = new Consumer(client, topics, options);\r\n\r\n    // Handle incoming Kafka messages\r\n    this.consumer.on('message', (message) => {\r\n      console.log('Received message:', message.value);\r\n      this.messages.push(message);\r\n    });\r\n\r\n    // Handle Kafka consumer errors\r\n    this.consumer.on('error', (error) => {\r\n      console.error('Consumer error:', error);\r\n    });\r\n  },\r\n  beforeDestroy() {\r\n    // Close Kafka consumer connection when the component is destroyed\r\n    if (this.consumer) {\r\n      this.consumer.close();\r\n    }\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";gCAGIA,mBAAA,CAA6B,YAAzB,sBAAoB;;;uBAD1BC,mBAAA,CAOM,cANJC,UAA6B,EAC7BF,mBAAA,CAIK,c,kBAHHC,mBAAA,CAEKE,SAAA,QAAAC,WAAA,CAFiBC,KAAA,CAAAC,QAAQ,EAAnBC,OAAO;yBAAlBN,mBAAA,CAEK;MAF4BO,GAAG,EAAED,OAAO,CAACE;wBACzCF,OAAO,CAACG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}