{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar assert = require('assert');\nvar util = require('util');\nvar EventEmitter = require('events');\nvar _ = require('lodash');\nvar protocol = require('./protocol');\nvar Message = protocol.Message;\nvar KeyedMessage = protocol.KeyedMessage;\nvar ProduceRequest = protocol.ProduceRequest;\nvar partitioner = require('./partitioner');\nvar DefaultPartitioner = partitioner.DefaultPartitioner;\nvar RandomPartitioner = partitioner.RandomPartitioner;\nvar CyclicPartitioner = partitioner.CyclicPartitioner;\nvar KeyedPartitioner = partitioner.KeyedPartitioner;\nvar CustomPartitioner = partitioner.CustomPartitioner;\nvar PARTITIONER_TYPES = {\n  default: 0,\n  random: 1,\n  cyclic: 2,\n  keyed: 3,\n  custom: 4\n};\nvar PARTITIONER_MAP = {\n  0: DefaultPartitioner,\n  1: RandomPartitioner,\n  2: CyclicPartitioner,\n  3: KeyedPartitioner,\n  4: CustomPartitioner\n};\nvar DEFAULTS = {\n  requireAcks: 1,\n  ackTimeoutMs: 100\n};\n\n/**\n * Provides common functionality for a kafka producer\n *\n * @param {Client} client A kafka client object to use for the producer\n * @param {Object} [options] An object containing configuration options\n * @param {Number} [options.requireAcks=1] Configuration for when to consider a message as acknowledged.\n *      <li>0 = No ack required</li>\n *      <li>1 = Leader ack required</li>\n *      <li>-1 = All in sync replicas ack required</li>\n *\n * @param {Number} [options.ackTimeoutMs=100] The amount of time in milliseconds to wait for all acks before considered\n *      the message as errored\n * @param {Number} [defaultPartitionType] The default partitioner type\n * @param {Object} [customPartitioner] a custom partitinoer to use of the form: function (partitions, key)\n * @constructor\n */\nfunction BaseProducer(client, options, defaultPartitionerType, customPartitioner) {\n  EventEmitter.call(this);\n  options = options || {};\n  this.ready = false;\n  this.client = client;\n  this.requireAcks = options.requireAcks === undefined ? DEFAULTS.requireAcks : options.requireAcks;\n  this.ackTimeoutMs = options.ackTimeoutMs === undefined ? DEFAULTS.ackTimeoutMs : options.ackTimeoutMs;\n  if (customPartitioner !== undefined && options.partitionerType !== PARTITIONER_TYPES.custom) {\n    throw new Error('Partitioner Type must be custom if providing a customPartitioner.');\n  } else if (customPartitioner === undefined && options.partitionerType === PARTITIONER_TYPES.custom) {\n    throw new Error('No customer partitioner defined');\n  }\n  var partitionerType = PARTITIONER_MAP[options.partitionerType] || PARTITIONER_MAP[defaultPartitionerType];\n\n  // eslint-disable-next-line\n  this.partitioner = new partitionerType(customPartitioner);\n  this.connect();\n}\nutil.inherits(BaseProducer, EventEmitter);\nBaseProducer.prototype.connect = function () {\n  // emiter...\n  var self = this;\n  this.ready = this.client.ready;\n  if (this.ready) self.emit('ready');\n  this.client.on('ready', function () {\n    if (!self.ready) {\n      self.ready = true;\n      self.emit('ready');\n    }\n  });\n  this.client.on('brokersChanged', function () {\n    let topics = Object.keys(this.topicMetadata);\n    this.refreshMetadata(topics, function (error) {\n      if (error) {\n        self.emit('error', error);\n      }\n    });\n  });\n  this.client.on('error', function (err) {\n    self.emit('error', err);\n  });\n  this.client.on('close', function () {});\n};\n\n/**\n * Sends a new message or array of messages to a topic/partition\n * This will use the\n *\n * @see Client#sendProduceRequest for a more low level way to send messages to kafka\n *\n * @param {Array.<BaseProducer~sendPayload>} payloads An array of topic payloads\n * @param {BaseProducer~sendCallback} cb A function to call once the send has completed\n */\nBaseProducer.prototype.send = function (payloads, cb) {\n  var client = this.client;\n  var requireAcks = this.requireAcks;\n  var ackTimeoutMs = this.ackTimeoutMs;\n  client.sendProduceRequest(this.buildPayloads(payloads, client.topicMetadata), requireAcks, ackTimeoutMs, cb);\n};\nBaseProducer.prototype.buildPayloads = function (payloads, topicMetadata) {\n  const topicPartitionRequests = Object.create(null);\n  payloads.forEach(p => {\n    p.partition = p.hasOwnProperty('partition') ? p.partition : this.partitioner.getPartition(_.map(topicMetadata[p.topic], 'partition'), p.key);\n    p.attributes = p.hasOwnProperty('attributes') ? p.attributes : 0;\n    let messages = _.isArray(p.messages) ? p.messages : [p.messages];\n    messages = messages.map(function (message) {\n      if (message instanceof KeyedMessage) {\n        return message;\n      }\n      return new Message(0, 0, p.key, message, p.timestamp || Date.now());\n    });\n    let key = p.topic + p.partition;\n    let request = topicPartitionRequests[key];\n    if (request == null) {\n      topicPartitionRequests[key] = new ProduceRequest(p.topic, p.partition, messages, p.attributes);\n    } else {\n      assert(request.attributes === p.attributes);\n      Array.prototype.push.apply(request.messages, messages);\n    }\n  });\n  return _.values(topicPartitionRequests);\n};\nBaseProducer.prototype.createTopics = function (topics, async, cb) {\n  if (!this.ready) {\n    return cb(new Error('Producer not ready!'));\n  }\n  this.client.createTopics(topics, async, cb);\n};\nBaseProducer.prototype.close = function (cb) {\n  this.client.close(cb);\n};\nBaseProducer.PARTITIONER_TYPES = PARTITIONER_TYPES;\nmodule.exports = BaseProducer;","map":{"version":3,"names":["require","assert","util","EventEmitter","_","protocol","Message","KeyedMessage","ProduceRequest","partitioner","DefaultPartitioner","RandomPartitioner","CyclicPartitioner","KeyedPartitioner","CustomPartitioner","PARTITIONER_TYPES","default","random","cyclic","keyed","custom","PARTITIONER_MAP","DEFAULTS","requireAcks","ackTimeoutMs","BaseProducer","client","options","defaultPartitionerType","customPartitioner","call","ready","undefined","partitionerType","Error","connect","inherits","prototype","self","emit","on","topics","Object","keys","topicMetadata","refreshMetadata","error","err","send","payloads","cb","sendProduceRequest","buildPayloads","topicPartitionRequests","create","forEach","p","partition","hasOwnProperty","getPartition","map","topic","key","attributes","messages","isArray","message","timestamp","Date","now","request","Array","push","apply","values","createTopics","async","close","module","exports"],"sources":["D:/Project/VUEJSSPRING_CRUD_JWT/vue-crud-api-jwt-vuex/node_modules/kafka-node/lib/baseProducer.js"],"sourcesContent":["'use strict';\n\nvar assert = require('assert');\nvar util = require('util');\nvar EventEmitter = require('events');\nvar _ = require('lodash');\nvar protocol = require('./protocol');\nvar Message = protocol.Message;\nvar KeyedMessage = protocol.KeyedMessage;\nvar ProduceRequest = protocol.ProduceRequest;\nvar partitioner = require('./partitioner');\nvar DefaultPartitioner = partitioner.DefaultPartitioner;\nvar RandomPartitioner = partitioner.RandomPartitioner;\nvar CyclicPartitioner = partitioner.CyclicPartitioner;\nvar KeyedPartitioner = partitioner.KeyedPartitioner;\nvar CustomPartitioner = partitioner.CustomPartitioner;\n\nvar PARTITIONER_TYPES = {\n  default: 0,\n  random: 1,\n  cyclic: 2,\n  keyed: 3,\n  custom: 4\n};\n\nvar PARTITIONER_MAP = {\n  0: DefaultPartitioner,\n  1: RandomPartitioner,\n  2: CyclicPartitioner,\n  3: KeyedPartitioner,\n  4: CustomPartitioner\n};\n\nvar DEFAULTS = {\n  requireAcks: 1,\n  ackTimeoutMs: 100\n};\n\n/**\n * Provides common functionality for a kafka producer\n *\n * @param {Client} client A kafka client object to use for the producer\n * @param {Object} [options] An object containing configuration options\n * @param {Number} [options.requireAcks=1] Configuration for when to consider a message as acknowledged.\n *      <li>0 = No ack required</li>\n *      <li>1 = Leader ack required</li>\n *      <li>-1 = All in sync replicas ack required</li>\n *\n * @param {Number} [options.ackTimeoutMs=100] The amount of time in milliseconds to wait for all acks before considered\n *      the message as errored\n * @param {Number} [defaultPartitionType] The default partitioner type\n * @param {Object} [customPartitioner] a custom partitinoer to use of the form: function (partitions, key)\n * @constructor\n */\nfunction BaseProducer (client, options, defaultPartitionerType, customPartitioner) {\n  EventEmitter.call(this);\n  options = options || {};\n\n  this.ready = false;\n  this.client = client;\n\n  this.requireAcks = options.requireAcks === undefined ? DEFAULTS.requireAcks : options.requireAcks;\n  this.ackTimeoutMs = options.ackTimeoutMs === undefined ? DEFAULTS.ackTimeoutMs : options.ackTimeoutMs;\n\n  if (customPartitioner !== undefined && options.partitionerType !== PARTITIONER_TYPES.custom) {\n    throw new Error('Partitioner Type must be custom if providing a customPartitioner.');\n  } else if (customPartitioner === undefined && options.partitionerType === PARTITIONER_TYPES.custom) {\n    throw new Error('No customer partitioner defined');\n  }\n\n  var partitionerType = PARTITIONER_MAP[options.partitionerType] || PARTITIONER_MAP[defaultPartitionerType];\n\n  // eslint-disable-next-line\n  this.partitioner = new partitionerType(customPartitioner);\n\n  this.connect();\n}\n\nutil.inherits(BaseProducer, EventEmitter);\n\nBaseProducer.prototype.connect = function () {\n  // emiter...\n  var self = this;\n  this.ready = this.client.ready;\n  if (this.ready) self.emit('ready');\n  this.client.on('ready', function () {\n    if (!self.ready) {\n      self.ready = true;\n      self.emit('ready');\n    }\n  });\n  this.client.on('brokersChanged', function () {\n    let topics = Object.keys(this.topicMetadata);\n    this.refreshMetadata(topics, function (error) {\n      if (error) {\n        self.emit('error', error);\n      }\n    });\n  });\n  this.client.on('error', function (err) {\n    self.emit('error', err);\n  });\n  this.client.on('close', function () {});\n};\n\n/**\n * Sends a new message or array of messages to a topic/partition\n * This will use the\n *\n * @see Client#sendProduceRequest for a more low level way to send messages to kafka\n *\n * @param {Array.<BaseProducer~sendPayload>} payloads An array of topic payloads\n * @param {BaseProducer~sendCallback} cb A function to call once the send has completed\n */\nBaseProducer.prototype.send = function (payloads, cb) {\n  var client = this.client;\n  var requireAcks = this.requireAcks;\n  var ackTimeoutMs = this.ackTimeoutMs;\n\n  client.sendProduceRequest(this.buildPayloads(payloads, client.topicMetadata), requireAcks, ackTimeoutMs, cb);\n};\n\nBaseProducer.prototype.buildPayloads = function (payloads, topicMetadata) {\n  const topicPartitionRequests = Object.create(null);\n  payloads.forEach(p => {\n    p.partition = p.hasOwnProperty('partition')\n      ? p.partition\n      : this.partitioner.getPartition(_.map(topicMetadata[p.topic], 'partition'), p.key);\n    p.attributes = p.hasOwnProperty('attributes') ? p.attributes : 0;\n    let messages = _.isArray(p.messages) ? p.messages : [p.messages];\n\n    messages = messages.map(function (message) {\n      if (message instanceof KeyedMessage) {\n        return message;\n      }\n      return new Message(0, 0, p.key, message, p.timestamp || Date.now());\n    });\n\n    let key = p.topic + p.partition;\n    let request = topicPartitionRequests[key];\n\n    if (request == null) {\n      topicPartitionRequests[key] = new ProduceRequest(p.topic, p.partition, messages, p.attributes);\n    } else {\n      assert(request.attributes === p.attributes);\n      Array.prototype.push.apply(request.messages, messages);\n    }\n  });\n  return _.values(topicPartitionRequests);\n};\n\nBaseProducer.prototype.createTopics = function (topics, async, cb) {\n  if (!this.ready) {\n    return cb(new Error('Producer not ready!'));\n  }\n\n  this.client.createTopics(topics, async, cb);\n};\n\nBaseProducer.prototype.close = function (cb) {\n  this.client.close(cb);\n};\n\nBaseProducer.PARTITIONER_TYPES = PARTITIONER_TYPES;\n\nmodule.exports = BaseProducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}