{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar assert = require('assert');\nvar InvalidConfigError = require('./errors/InvalidConfigError');\nvar legalChars = new RegExp('^[a-zA-Z0-9._-]*$');\nconst allowedTopicLength = 249;\nfunction validateConfig(property, value) {\n  if (!legalChars.test(value)) {\n    throw new InvalidConfigError([property, value, \"is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'\"].join(' '));\n  }\n}\nfunction validateTopicNames(topics) {\n  // Rewriting same validations done by Apache Kafka team for topics\n  // iterating over topics\n  topics.some(function (topic) {\n    if (topic.length <= 0) {\n      throw new InvalidConfigError('topic name is illegal, cannot be empty');\n    }\n    if (topic === '.' || topic === '..') {\n      throw new InvalidConfigError('topic name cannot be . or ..');\n    }\n    if (topic.length > allowedTopicLength) {\n      throw new InvalidConfigError(`topic name is illegal, cannot be longer than ${allowedTopicLength} characters`);\n    }\n    if (!legalChars.test(topic)) {\n      throw new InvalidConfigError(`topic name ${topic} is illegal, contains a character other than ASCII alphanumerics .,_ and -`);\n    }\n  });\n  return true;\n}\nfunction validateTopics(topics) {\n  if (topics.some(function (topic) {\n    if ('partition' in topic) {\n      return typeof topic.partition !== 'number';\n    }\n    return false;\n  })) {\n    throw new InvalidConfigError('Offset must be a number and can not contain characters');\n  }\n}\n\n/*\nConverts:\n\n  [\n    {topic: 'test', partition: 0},\n    {topic: 'test', partition: 1},\n    {topic: 'Bob', partition: 0}\n  ]\n\nInto:\n\n  {\n    test: [0, 1],\n    bob: [0]\n  }\n\n*/\nfunction groupPartitionsByTopic(topicPartitions) {\n  assert(Array.isArray(topicPartitions));\n  return topicPartitions.reduce(function (result, tp) {\n    if (!(tp.topic in result)) {\n      result[tp.topic] = [tp.partition];\n    } else {\n      result[tp.topic].push(tp.partition);\n    }\n    return result;\n  }, {});\n}\n\n/*\nConverts:\n  {\n    test: [0, 1],\n    bob: [0]\n  }\n\nInto a topic partition payload:\n  [\n    {topic: 'test', partition: 0},\n    {topic: 'test', partition: 1},\n    {topic: 'Bob', partition: 0}\n  ]\n*/\nfunction createTopicPartitionList(topicPartitions) {\n  var tpList = [];\n  for (var topic in topicPartitions) {\n    if (!topicPartitions.hasOwnProperty(topic)) {\n      continue;\n    }\n    topicPartitions[topic].forEach(function (partition) {\n      tpList.push({\n        topic: topic,\n        partition: partition\n      });\n    });\n  }\n  return tpList;\n}\nmodule.exports = {\n  validateConfig: validateConfig,\n  validateTopics: validateTopics,\n  groupPartitionsByTopic: groupPartitionsByTopic,\n  createTopicPartitionList: createTopicPartitionList,\n  validateTopicNames: validateTopicNames\n};","map":{"version":3,"names":["assert","require","InvalidConfigError","legalChars","RegExp","allowedTopicLength","validateConfig","property","value","test","join","validateTopicNames","topics","some","topic","length","validateTopics","partition","groupPartitionsByTopic","topicPartitions","Array","isArray","reduce","result","tp","push","createTopicPartitionList","tpList","hasOwnProperty","forEach","module","exports"],"sources":["D:/Project/VUEJSSPRING_CRUD_JWT/vue-crud-api-jwt-vuex/node_modules/kafka-node/lib/utils.js"],"sourcesContent":["var assert = require('assert');\nvar InvalidConfigError = require('./errors/InvalidConfigError');\nvar legalChars = new RegExp('^[a-zA-Z0-9._-]*$');\nconst allowedTopicLength = 249;\n\nfunction validateConfig (property, value) {\n  if (!legalChars.test(value)) {\n    throw new InvalidConfigError([property, value, \"is illegal, contains a character other than ASCII alphanumerics, '.', '_' and '-'\"].join(' '));\n  }\n}\n\nfunction validateTopicNames (topics) {\n  // Rewriting same validations done by Apache Kafka team for topics\n  // iterating over topics\n  topics.some(function (topic) {\n    if (topic.length <= 0) {\n      throw new InvalidConfigError('topic name is illegal, cannot be empty');\n    }\n    if (topic === '.' || topic === '..') {\n      throw new InvalidConfigError('topic name cannot be . or ..');\n    }\n    if (topic.length > allowedTopicLength) {\n      throw new InvalidConfigError(`topic name is illegal, cannot be longer than ${allowedTopicLength} characters`);\n    }\n    if (!legalChars.test(topic)) {\n      throw new InvalidConfigError(`topic name ${topic} is illegal, contains a character other than ASCII alphanumerics .,_ and -`);\n    }\n  });\n  return true;\n}\n\nfunction validateTopics (topics) {\n  if (topics.some(function (topic) {\n    if ('partition' in topic) {\n      return typeof topic.partition !== 'number';\n    }\n    return false;\n  })) {\n    throw new InvalidConfigError('Offset must be a number and can not contain characters');\n  }\n}\n\n/*\nConverts:\n\n  [\n    {topic: 'test', partition: 0},\n    {topic: 'test', partition: 1},\n    {topic: 'Bob', partition: 0}\n  ]\n\nInto:\n\n  {\n    test: [0, 1],\n    bob: [0]\n  }\n\n*/\nfunction groupPartitionsByTopic (topicPartitions) {\n  assert(Array.isArray(topicPartitions));\n  return topicPartitions.reduce(function (result, tp) {\n    if (!(tp.topic in result)) {\n      result[tp.topic] = [tp.partition];\n    } else {\n      result[tp.topic].push(tp.partition);\n    }\n    return result;\n  }, {});\n}\n\n/*\nConverts:\n  {\n    test: [0, 1],\n    bob: [0]\n  }\n\nInto a topic partition payload:\n  [\n    {topic: 'test', partition: 0},\n    {topic: 'test', partition: 1},\n    {topic: 'Bob', partition: 0}\n  ]\n*/\nfunction createTopicPartitionList (topicPartitions) {\n  var tpList = [];\n  for (var topic in topicPartitions) {\n    if (!topicPartitions.hasOwnProperty(topic)) {\n      continue;\n    }\n    topicPartitions[topic].forEach(function (partition) {\n      tpList.push({\n        topic: topic,\n        partition: partition\n      });\n    });\n  }\n  return tpList;\n}\n\nmodule.exports = {\n  validateConfig: validateConfig,\n  validateTopics: validateTopics,\n  groupPartitionsByTopic: groupPartitionsByTopic,\n  createTopicPartitionList: createTopicPartitionList,\n  validateTopicNames: validateTopicNames\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}