{"ast":null,"code":"var util = require('util');\nvar MessageSizeTooLarge = function (vars) {\n  Error.captureStackTrace(this, this);\n  if (typeof vars === 'object') {\n    this.message = `Found a message larger than the maximum fetch size of this consumer on topic ${vars.topic} partition ${vars.partition} at fetch offset ${vars.offset}. Increase the fetch size, or decrease the maximum message size the broker will allow.`;\n  } else {\n    this.message = vars;\n  }\n};\nutil.inherits(MessageSizeTooLarge, Error);\nMessageSizeTooLarge.prototype.name = 'MessageSizeTooLarge';\nmodule.exports = MessageSizeTooLarge;","map":{"version":3,"names":["util","require","MessageSizeTooLarge","vars","Error","captureStackTrace","message","topic","partition","offset","inherits","prototype","name","module","exports"],"sources":["D:/Project/VUEJSSPRING_CRUD_JWT/vue-crud-api-jwt-vuex/node_modules/kafka-node/lib/errors/MessageSizeTooLargeError.js"],"sourcesContent":["var util = require('util');\n\nvar MessageSizeTooLarge = function (vars) {\n  Error.captureStackTrace(this, this);\n  if (typeof vars === 'object') {\n    this.message = `Found a message larger than the maximum fetch size of this consumer on topic ${vars.topic} partition ${vars.partition} at fetch offset ${vars.offset}. Increase the fetch size, or decrease the maximum message size the broker will allow.`;\n  } else {\n    this.message = vars;\n  }\n};\n\nutil.inherits(MessageSizeTooLarge, Error);\nMessageSizeTooLarge.prototype.name = 'MessageSizeTooLarge';\n\nmodule.exports = MessageSizeTooLarge;\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIC,mBAAmB,GAAG,SAAAA,CAAUC,IAAI,EAAE;EACxCC,KAAK,CAACC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC;EACnC,IAAI,OAAOF,IAAI,KAAK,QAAQ,EAAE;IAC5B,IAAI,CAACG,OAAO,GAAI,gFAA+EH,IAAI,CAACI,KAAM,cAAaJ,IAAI,CAACK,SAAU,oBAAmBL,IAAI,CAACM,MAAO,wFAAuF;EAC9P,CAAC,MAAM;IACL,IAAI,CAACH,OAAO,GAAGH,IAAI;EACrB;AACF,CAAC;AAEDH,IAAI,CAACU,QAAQ,CAACR,mBAAmB,EAAEE,KAAK,CAAC;AACzCF,mBAAmB,CAACS,SAAS,CAACC,IAAI,GAAG,qBAAqB;AAE1DC,MAAM,CAACC,OAAO,GAAGZ,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}