{"ast":null,"code":"/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/Long.js for details\n * \n * Long.js is based on goog.math.Long from the Closure Library.\n * Copyright 2009 The Closure Library Authors. All Rights Reserved.\n * Released under the Apache License, Version 2.0\n * see: https://code.google.com/p/closure-library/ for details\n */\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n */\n(function (global) {\n  /**\n   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n   * values as *signed* integers.  See the from* functions below for more\n   * convenient ways of constructing Longs.\n   *\n   * The internal representation of a long is the two given signed, 32-bit values.\n   * We use 32-bit pieces because these are the size of integers on which\n   * Javascript performs bit-operations.  For operations like addition and\n   * multiplication, we split each number into 16-bit pieces, which can easily be\n   * multiplied within Javascript's floating-point representation without overflow\n   * or change in sign.\n   *\n   * In the algorithms below, we frequently reduce the negative case to the\n   * positive case by negating the input(s) and then post-processing the result.\n   * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n   * a positive number, it overflows back into a negative).  Not handling this\n   * case would often result in infinite recursion.\n   * \n   * @exports Long\n   * @class A Long class for representing a 64-bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long.\n   * @param {number} high The high (signed) 32 bits of the long.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to `false` (signed).\n   * @constructor\n   */\n  var Long = function (low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n    this.low = low | 0;\n\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     * @expose\n     */\n    this.high = high | 0;\n\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     * @expose\n     */\n    this.unsigned = !!unsigned;\n  };\n\n  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from* methods on which they depend.\n\n  // NOTE: The following cache variables are used internally only and are therefore not exposed as properties of the\n  // Long class.\n\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   */\n  var INT_CACHE = {};\n\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   */\n  var UINT_CACHE = {};\n\n  /**\n   * Returns a Long representing the given (32-bit) integer value.\n   * @param {number} value The 32-bit integer in question.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n  Long.fromInt = function (value, unsigned) {\n    var obj, cachedObj;\n    if (!unsigned) {\n      value = value | 0;\n      if (-128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = new Long(value, value < 0 ? -1 : 0, false);\n      if (-128 <= value && value < 128) {\n        INT_CACHE[value] = obj;\n      }\n      return obj;\n    } else {\n      value = value >>> 0;\n      if (0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n      if (0 <= value && value < 256) {\n        UINT_CACHE[value] = obj;\n      }\n      return obj;\n    }\n  };\n\n  /**\n   * Returns a Long representing the given value, provided that it is a finite\n   * number.  Otherwise, zero is returned.\n   * @param {number} value The number in question.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n  Long.fromNumber = function (value, unsigned) {\n    unsigned = !!unsigned;\n    if (isNaN(value) || !isFinite(value)) {\n      return Long.ZERO;\n    } else if (!unsigned && value <= -TWO_PWR_63_DBL) {\n      return Long.MIN_SIGNED_VALUE;\n    } else if (unsigned && value <= 0) {\n      return Long.MIN_UNSIGNED_VALUE;\n    } else if (!unsigned && value + 1 >= TWO_PWR_63_DBL) {\n      return Long.MAX_SIGNED_VALUE;\n    } else if (unsigned && value >= TWO_PWR_64_DBL) {\n      return Long.MAX_UNSIGNED_VALUE;\n    } else if (value < 0) {\n      return Long.fromNumber(-value, false).negate();\n    } else {\n      return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n    }\n  };\n\n  /**\n   * Returns a Long representing the 64bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @param {number} lowBits The low 32 bits.\n   * @param {number} highBits The high 32 bits.\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n  Long.fromBits = function (lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  };\n\n  /**\n   * Returns a Long representing the 64bit integer that comes by concatenating the given low, middle and high bits.\n   *  Each is assumed to use 28 bits.\n   * @param {number} part0 The low 28 bits\n   * @param {number} part1 The middle 28 bits\n   * @param {number} part2 The high 28 (8) bits\n   * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @return {!Long}\n   * @expose\n   */\n  Long.from28Bits = function (part0, part1, part2, unsigned) {\n    // 00000000000000000000000000001111 11111111111111111111111122222222 2222222222222\n    // LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\n    return Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, unsigned);\n  };\n\n  /**\n   * Returns a Long representation of the given string, written using the given\n   * radix.\n   * @param {string} str The textual representation of the Long.\n   * @param {(boolean|number)=} unsigned Whether unsigned or not. Defaults to false (signed).\n   * @param {number=} radix The radix in which the text is written.\n   * @return {!Long} The corresponding Long value.\n   * @expose\n   */\n  Long.fromString = function (str, unsigned, radix) {\n    if (str.length == 0) {\n      throw new Error('number format error: empty string');\n    }\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") {\n      return Long.ZERO;\n    }\n    if (typeof unsigned === 'number') {\n      // For goog.math.Long compatibility\n      radix = unsigned;\n      unsigned = false;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw new Error('radix out of range: ' + radix);\n    }\n    if (str.charAt(0) == '-') {\n      return Long.fromString(str.substring(1), unsigned, radix).negate();\n    } else if (str.indexOf('-') >= 0) {\n      throw new Error('number format error: interior \"-\" character: ' + str);\n    }\n\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n    var result = Long.ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i);\n      var value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = Long.fromNumber(Math.pow(radix, size));\n        result = result.multiply(power).add(Long.fromNumber(value));\n      } else {\n        result = result.multiply(radixToPower);\n        result = result.add(Long.fromNumber(value));\n      }\n    }\n    return result;\n  };\n\n  // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  // NOTE: The following constant values are used internally only and are therefore not exposed as properties of the\n  // Long class.\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_16_DBL = 1 << 16;\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_24_DBL = 1 << 24;\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_31_DBL = TWO_PWR_32_DBL / 2;\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_48_DBL = TWO_PWR_32_DBL * TWO_PWR_16_DBL;\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n  /**\n   * @type {number}\n   */\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n  /**\n   * @type {!Long}\n   */\n  var TWO_PWR_24 = Long.fromInt(1 << 24);\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.ZERO = Long.fromInt(0);\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.ONE = Long.fromInt(1);\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.NEG_ONE = Long.fromInt(-1);\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.MAX_SIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n  /**\n   * Alias of {@link Long.MAX_SIGNED_VALUE} for goog.math.Long compatibility.\n   * @type {!Long}\n   * @expose\n   */\n  Long.MAX_VALUE = Long.MAX_SIGNED_VALUE;\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.MIN_SIGNED_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\n  /**\n   * @type {!Long}\n   * @expose\n   */\n  Long.MIN_UNSIGNED_VALUE = Long.fromBits(0, 0, true);\n\n  /**\n   * Alias of {@link Long.MIN_SIGNED_VALUE}  for goog.math.Long compatibility.\n   * @type {!Long}\n   * @expose\n   */\n  Long.MIN_VALUE = Long.MIN_SIGNED_VALUE;\n\n  /**\n   * @return {number} The value, assuming it is a 32-bit integer.\n   * @expose\n   */\n  Long.prototype.toInt = function () {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n\n  /**\n   * @return {number} The closest floating-point representation to this value.\n   * @expose\n   */\n  Long.prototype.toNumber = function () {\n    if (this.unsigned) {\n      return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    }\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n\n  /**\n   * @param {number=} radix The radix in which the text should be written.\n   * @return {string} The textual representation of this value.\n   * @override\n   * @expose\n   */\n  Long.prototype.toString = function (radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) {\n      throw new Error('radix out of range: ' + radix);\n    }\n    if (this.isZero()) {\n      return '0';\n    }\n    var rem;\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.equals(Long.MIN_SIGNED_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = Long.fromNumber(radix);\n        var div = this.div(radixLong);\n        rem = div.multiply(radixLong).subtract(this);\n        return div.toString(radix) + rem.toInt().toString(radix);\n      } else {\n        return '-' + this.negate().toString(radix);\n      }\n    }\n\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n    rem = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.div(radixToPower);\n      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n      var digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) {\n        return digits + result;\n      } else {\n        while (digits.length < 6) {\n          digits = '0' + digits;\n        }\n        result = '' + digits + result;\n      }\n    }\n  };\n\n  /**\n   * @return {number} The high 32 bits as a signed value.\n   * @expose\n   */\n  Long.prototype.getHighBits = function () {\n    return this.high;\n  };\n\n  /**\n   * @return {number} The high 32 bits as an unsigned value.\n   * @expose\n   */\n  Long.prototype.getHighBitsUnsigned = function () {\n    return this.high >>> 0;\n  };\n\n  /**\n   * @return {number} The low 32 bits as a signed value.\n   * @expose\n   */\n  Long.prototype.getLowBits = function () {\n    return this.low;\n  };\n\n  /**\n   * @return {number} The low 32 bits as an unsigned value.\n   * @expose\n   */\n  Long.prototype.getLowBitsUnsigned = function () {\n    return this.low >>> 0;\n  };\n\n  /**\n   * @return {number} Returns the number of bits needed to represent the absolute\n   *     value of this Long.\n   * @expose\n   */\n  Long.prototype.getNumBitsAbs = function () {\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.equals(Long.MIN_SIGNED_VALUE)) {\n        return 64;\n      } else {\n        return this.negate().getNumBitsAbs();\n      }\n    } else {\n      var val = this.high != 0 ? this.high : this.low;\n      for (var bit = 31; bit > 0; bit--) {\n        if ((val & 1 << bit) != 0) {\n          break;\n        }\n      }\n      return this.high != 0 ? bit + 33 : bit + 1;\n    }\n  };\n\n  /**\n   * @return {boolean} Whether this value is zero.\n   * @expose\n   */\n  Long.prototype.isZero = function () {\n    return this.high == 0 && this.low == 0;\n  };\n\n  /**\n   * @return {boolean} Whether this value is negative.\n   * @expose\n   */\n  Long.prototype.isNegative = function () {\n    return !this.unsigned && this.high < 0;\n  };\n\n  /**\n   * @return {boolean} Whether this value is odd.\n   * @expose\n   */\n  Long.prototype.isOdd = function () {\n    return (this.low & 1) == 1;\n  };\n\n  /**\n   * @return {boolean} Whether this value is even.\n   */\n  Long.prototype.isEven = function () {\n    return (this.low & 1) == 0;\n  };\n\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long equals the other.\n   * @expose\n   */\n  Long.prototype.equals = function (other) {\n    if (this.unsigned != other.unsigned && this.high >>> 31 != other.high >>> 31) return false;\n    return this.high == other.high && this.low == other.low;\n  };\n\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long does not equal the other.\n   * @expose\n   */\n  Long.prototype.notEquals = function (other) {\n    return !this.equals(other);\n  };\n\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is less than the other.\n   * @expose\n   */\n  Long.prototype.lessThan = function (other) {\n    return this.compare(other) < 0;\n  };\n\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is less than or equal to the other.\n   * @expose\n   */\n  Long.prototype.lessThanOrEqual = function (other) {\n    return this.compare(other) <= 0;\n  };\n\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is greater than the other.\n   * @expose\n   */\n  Long.prototype.greaterThan = function (other) {\n    return this.compare(other) > 0;\n  };\n\n  /**\n   * @param {Long} other Long to compare against.\n   * @return {boolean} Whether this Long is greater than or equal to the other.\n   * @expose\n   */\n  Long.prototype.greaterThanOrEqual = function (other) {\n    return this.compare(other) >= 0;\n  };\n\n  /**\n   * Compares this Long with the given one.\n   * @param {Long} other Long to compare against.\n   * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n   *     if the given one is greater.\n   * @expose\n   */\n  Long.prototype.compare = function (other) {\n    if (this.equals(other)) {\n      return 0;\n    }\n    var thisNeg = this.isNegative();\n    var otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1;\n    if (!this.unsigned) {\n      // At this point the signs are the same\n      return this.subtract(other).isNegative() ? -1 : 1;\n    } else {\n      // Both are positive if at least one is unsigned\n      return other.high >>> 0 > this.high >>> 0 || other.high == this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n  };\n\n  /**\n   * @return {!Long} The negation of this value.\n   * @expose\n   */\n  Long.prototype.negate = function () {\n    if (!this.unsigned && this.equals(Long.MIN_SIGNED_VALUE)) {\n      return Long.MIN_SIGNED_VALUE;\n    }\n    return this.not().add(Long.ONE);\n  };\n\n  /**\n   * Returns the sum of this and the given Long.\n   * @param {Long} other Long to add to this one.\n   * @return {!Long} The sum of this and the given Long.\n   * @expose\n   */\n  Long.prototype.add = function (other) {\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = other.high >>> 16;\n    var b32 = other.high & 0xFFFF;\n    var b16 = other.low >>> 16;\n    var b00 = other.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\n   * Returns the difference of this and the given Long.\n   * @param {Long} other Long to subtract from this.\n   * @return {!Long} The difference of this and the given Long.\n   * @expose\n   */\n  Long.prototype.subtract = function (other) {\n    return this.add(other.negate());\n  };\n\n  /**\n   * Returns the product of this and the given long.\n   * @param {Long} other Long to multiply with this.\n   * @return {!Long} The product of this and the other.\n   * @expose\n   */\n  Long.prototype.multiply = function (other) {\n    if (this.isZero()) {\n      return Long.ZERO;\n    } else if (other.isZero()) {\n      return Long.ZERO;\n    }\n    if (this.equals(Long.MIN_VALUE)) {\n      return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n    }\n    if (this.isNegative()) {\n      if (other.isNegative()) {\n        return this.negate().multiply(other.negate());\n      } else {\n        return this.negate().multiply(other).negate();\n      }\n    } else if (other.isNegative()) {\n      return this.multiply(other.negate()).negate();\n    }\n    // If both longs are small, use float multiplication\n    if (this.lessThan(TWO_PWR_24) && other.lessThan(TWO_PWR_24)) {\n      return Long.fromNumber(this.toNumber() * other.toNumber(), this.unsigned);\n    }\n\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = other.high >>> 16;\n    var b32 = other.high & 0xFFFF;\n    var b16 = other.low >>> 16;\n    var b00 = other.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return Long.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n\n  /**\n   * Returns this Long divided by the given one.\n   * @param {Long} other Long by which to divide.\n   * @return {!Long} This Long divided by the given one.\n   * @expose\n   */\n  Long.prototype.div = function (other) {\n    if (other.isZero()) {\n      throw new Error('division by zero');\n    } else if (this.isZero()) {\n      return Long.ZERO;\n    }\n    if (this.equals(Long.MIN_SIGNED_VALUE)) {\n      if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n        return min; // recall that -MIN_VALUE == MIN_VALUE\n      } else if (other.equals(Long.MIN_VALUE)) {\n        return Long.ONE;\n      } else {\n        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n        var halfThis = this.shiftRight(1);\n        var approx = halfThis.div(other).shiftLeft(1);\n        if (approx.equals(Long.ZERO)) {\n          return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n        } else {\n          var rem = this.subtract(other.multiply(approx));\n          var result = approx.add(rem.div(other));\n          return result;\n        }\n      }\n    } else if (other.equals(Long.MIN_VALUE)) {\n      return Long.ZERO;\n    }\n    if (this.isNegative()) {\n      if (other.isNegative()) {\n        return this.negate().div(other.negate());\n      } else {\n        return this.negate().div(other).negate();\n      }\n    } else if (other.isNegative()) {\n      return this.div(other.negate()).negate();\n    }\n\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    var res = Long.ZERO;\n    var rem = this;\n    while (rem.greaterThanOrEqual(other)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n      // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n      var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n\n      // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      var approxRes = Long.fromNumber(approx, this.unsigned);\n      var approxRem = approxRes.multiply(other);\n      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n        approx -= delta;\n        approxRes = Long.fromNumber(approx, this.unsigned);\n        approxRem = approxRes.multiply(other);\n      }\n\n      // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n      if (approxRes.isZero()) {\n        approxRes = Long.ONE;\n      }\n      res = res.add(approxRes);\n      rem = rem.subtract(approxRem);\n    }\n    return res;\n  };\n\n  /**\n   * Returns this Long modulo the given one.\n   * @param {Long} other Long by which to mod.\n   * @return {!Long} This Long modulo the given one.\n   * @expose\n   */\n  Long.prototype.modulo = function (other) {\n    return this.subtract(this.div(other).multiply(other));\n  };\n\n  /**\n   * @return {!Long} The bitwise-NOT of this value.\n   * @expose\n   */\n  Long.prototype.not = function () {\n    return Long.fromBits(~this.low, ~this.high, this.unsigned);\n  };\n\n  /**\n   * Returns the bitwise-AND of this Long and the given one.\n   * @param {Long} other The Long with which to AND.\n   * @return {!Long} The bitwise-AND of this and the other.\n   * @expose\n   */\n  Long.prototype.and = function (other) {\n    return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n\n  /**\n   * Returns the bitwise-OR of this Long and the given one.\n   * @param {Long} other The Long with which to OR.\n   * @return {!Long} The bitwise-OR of this and the other.\n   * @expose\n   */\n  Long.prototype.or = function (other) {\n    return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n\n  /**\n   * Returns the bitwise-XOR of this Long and the given one.\n   * @param {Long} other The Long with which to XOR.\n   * @return {!Long} The bitwise-XOR of this and the other.\n   * @expose\n   */\n  Long.prototype.xor = function (other) {\n    return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!Long} This shifted to the left by the given amount.\n   * @expose\n   */\n  Long.prototype.shiftLeft = function (numBits) {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var low = this.low;\n      if (numBits < 32) {\n        var high = this.high;\n        return Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits, this.unsigned);\n      } else {\n        return Long.fromBits(0, low << numBits - 32, this.unsigned);\n      }\n    }\n  };\n\n  /**\n   * Returns this Long with bits shifted to the right by the given amount.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!Long} This shifted to the right by the given amount.\n   * @expose\n   */\n  Long.prototype.shiftRight = function (numBits) {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high;\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits, this.unsigned);\n      } else {\n        return Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1, this.unsigned);\n      }\n    }\n  };\n\n  /**\n   * Returns this Long with bits shifted to the right by the given amount, with\n   * the new top bits matching the current sign bit.\n   * @param {number} numBits The number of bits by which to shift.\n   * @return {!Long} This shifted to the right by the given amount, with\n   *     zeros placed into the new leading bits.\n   * @expose\n   */\n  Long.prototype.shiftRightUnsigned = function (numBits) {\n    numBits &= 63;\n    if (numBits == 0) {\n      return this;\n    } else {\n      var high = this.high;\n      if (numBits < 32) {\n        var low = this.low;\n        return Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);\n      } else if (numBits == 32) {\n        return Long.fromBits(high, 0, this.unsigned);\n      } else {\n        return Long.fromBits(high >>> numBits - 32, 0, this.unsigned);\n      }\n    }\n  };\n\n  /**\n   * @return {!Long} Signed long\n   * @expose\n   */\n  Long.prototype.toSigned = function () {\n    var l = this.clone();\n    l.unsigned = false;\n    return l;\n  };\n\n  /**\n   * @return {!Long} Unsigned long\n   * @expose\n   */\n  Long.prototype.toUnsigned = function () {\n    var l = this.clone();\n    l.unsigned = true;\n    return l;\n  };\n\n  /**\n   * @return {Long} Cloned instance with the same low/high bits and unsigned flag.\n   * @expose\n   */\n  Long.prototype.clone = function () {\n    return new Long(this.low, this.high, this.unsigned);\n  };\n\n  // Enable module loading if available\n  if (typeof module != 'undefined' && module[\"exports\"]) {\n    // CommonJS\n    module[\"exports\"] = Long;\n  } else if (typeof define != 'undefined' && define[\"amd\"]) {\n    // AMD\n    define(\"Math/Long\", [], function () {\n      return Long;\n    });\n  } else {\n    // Shim\n    if (!global[\"dcodeIO\"]) {\n      global[\"dcodeIO\"] = {};\n    }\n    global[\"dcodeIO\"][\"Long\"] = Long;\n  }\n})(this);","map":{"version":3,"names":["global","Long","low","high","unsigned","INT_CACHE","UINT_CACHE","fromInt","value","obj","cachedObj","fromNumber","isNaN","isFinite","ZERO","TWO_PWR_63_DBL","MIN_SIGNED_VALUE","MIN_UNSIGNED_VALUE","MAX_SIGNED_VALUE","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","negate","TWO_PWR_32_DBL","fromBits","lowBits","highBits","from28Bits","part0","part1","part2","fromString","str","radix","length","Error","charAt","substring","indexOf","radixToPower","Math","pow","result","i","size","min","parseInt","power","multiply","add","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_31_DBL","TWO_PWR_48_DBL","TWO_PWR_24","ONE","NEG_ONE","MAX_VALUE","MIN_VALUE","prototype","toInt","toNumber","toString","isZero","rem","isNegative","equals","radixLong","div","subtract","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","val","bit","isOdd","isEven","other","notEquals","lessThan","compare","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","halfThis","shiftRight","approx","shiftLeft","res","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","toSigned","l","clone","toUnsigned","module","define"],"sources":["D:/Project/VUEJSSPRING_CRUD_JWT/vue-crud-api-jwt-vuex/node_modules/long/Long.js"],"sourcesContent":["/*\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS-IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\n/**\n * @license Long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\n * Released under the Apache License, Version 2.0\n * see: https://github.com/dcodeIO/Long.js for details\n * \n * Long.js is based on goog.math.Long from the Closure Library.\n * Copyright 2009 The Closure Library Authors. All Rights Reserved.\n * Released under the Apache License, Version 2.0\n * see: https://code.google.com/p/closure-library/ for details\n */\n\n/**\n * Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n */\n(function(global) {\n\n    /**\n     * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n     * values as *signed* integers.  See the from* functions below for more\n     * convenient ways of constructing Longs.\n     *\n     * The internal representation of a long is the two given signed, 32-bit values.\n     * We use 32-bit pieces because these are the size of integers on which\n     * Javascript performs bit-operations.  For operations like addition and\n     * multiplication, we split each number into 16-bit pieces, which can easily be\n     * multiplied within Javascript's floating-point representation without overflow\n     * or change in sign.\n     *\n     * In the algorithms below, we frequently reduce the negative case to the\n     * positive case by negating the input(s) and then post-processing the result.\n     * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n     * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n     * a positive number, it overflows back into a negative).  Not handling this\n     * case would often result in infinite recursion.\n     * \n     * @exports Long\n     * @class A Long class for representing a 64-bit two's-complement integer value.\n     * @param {number} low The low (signed) 32 bits of the long.\n     * @param {number} high The high (signed) 32 bits of the long.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to `false` (signed).\n     * @constructor\n     */\n    var Long = function(low, high, unsigned) {\n        \n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low | 0;\n\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high | 0;\n\n        /**\n         * Whether unsigned or not.\n         * @type {boolean}\n         * @expose\n         */\n        this.unsigned = !!unsigned;\n    };\n\n    // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from* methods on which they depend.\n\n    // NOTE: The following cache variables are used internally only and are therefore not exposed as properties of the\n    // Long class.\n    \n    /**\n     * A cache of the Long representations of small integer values.\n     * @type {!Object}\n     */\n    var INT_CACHE = {};\n\n    /**\n     * A cache of the Long representations of small unsigned integer values.\n     * @type {!Object}\n     */\n    var UINT_CACHE = {};\n\n    /**\n     * Returns a Long representing the given (32-bit) integer value.\n     * @param {number} value The 32-bit integer in question.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromInt = function(value, unsigned) {\n        var obj, cachedObj;\n        if (!unsigned) {\n            value = value | 0;\n            if (-128 <= value && value < 128) {\n                cachedObj = INT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = new Long(value, value < 0 ? -1 : 0, false);\n            if (-128 <= value && value < 128) {\n                INT_CACHE[value] = obj;\n            }\n            return obj;\n        } else {\n            value = value >>> 0;\n            if (0 <= value && value < 256) {\n                cachedObj = UINT_CACHE[value];\n                if (cachedObj) return cachedObj;\n            }\n            obj = new Long(value, (value | 0) < 0 ? -1 : 0, true);\n            if (0 <= value && value < 256) {\n                UINT_CACHE[value] = obj;\n            }\n            return obj;\n        }\n    };\n\n    /**\n     * Returns a Long representing the given value, provided that it is a finite\n     * number.  Otherwise, zero is returned.\n     * @param {number} value The number in question.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromNumber = function(value, unsigned) {\n        unsigned = !!unsigned;\n        if (isNaN(value) || !isFinite(value)) {\n            return Long.ZERO;\n        } else if (!unsigned && value <= -TWO_PWR_63_DBL) {\n            return Long.MIN_SIGNED_VALUE;\n        } else if (unsigned && value <= 0) {\n            return Long.MIN_UNSIGNED_VALUE;\n        } else if (!unsigned && value + 1 >= TWO_PWR_63_DBL) {\n            return Long.MAX_SIGNED_VALUE;\n        } else if (unsigned && value >= TWO_PWR_64_DBL) {\n            return Long.MAX_UNSIGNED_VALUE;\n        } else if (value < 0) {\n            return Long.fromNumber(-value, false).negate();\n        } else {\n            return new Long((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n        }\n    };\n\n    /**\n     * Returns a Long representing the 64bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @param {number} lowBits The low 32 bits.\n     * @param {number} highBits The high 32 bits.\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromBits = function(lowBits, highBits, unsigned) {\n        return new Long(lowBits, highBits, unsigned);\n    };\n\n    /**\n     * Returns a Long representing the 64bit integer that comes by concatenating the given low, middle and high bits.\n     *  Each is assumed to use 28 bits.\n     * @param {number} part0 The low 28 bits\n     * @param {number} part1 The middle 28 bits\n     * @param {number} part2 The high 28 (8) bits\n     * @param {boolean=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @return {!Long}\n     * @expose\n     */\n    Long.from28Bits = function(part0, part1, part2, unsigned) {\n        // 00000000000000000000000000001111 11111111111111111111111122222222 2222222222222\n        // LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\n        return Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, unsigned);\n    };\n\n    /**\n     * Returns a Long representation of the given string, written using the given\n     * radix.\n     * @param {string} str The textual representation of the Long.\n     * @param {(boolean|number)=} unsigned Whether unsigned or not. Defaults to false (signed).\n     * @param {number=} radix The radix in which the text is written.\n     * @return {!Long} The corresponding Long value.\n     * @expose\n     */\n    Long.fromString = function(str, unsigned, radix) {\n        if (str.length == 0) {\n            throw(new Error('number format error: empty string'));\n        }\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") {\n            return Long.ZERO;\n        }\n        if (typeof unsigned === 'number') { // For goog.math.Long compatibility\n            radix = unsigned;\n            unsigned = false;\n        }\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) {\n            throw(new Error('radix out of range: ' + radix));\n        }\n\n        if (str.charAt(0) == '-') {\n            return Long.fromString(str.substring(1), unsigned, radix).negate();\n        } else if (str.indexOf('-') >= 0) {\n            throw(new Error('number format error: interior \"-\" character: ' + str));\n        }\n\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n        var result = Long.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var value = parseInt(str.substring(i, i + size), radix);\n            if (size < 8) {\n                var power = Long.fromNumber(Math.pow(radix, size));\n                result = result.multiply(power).add(Long.fromNumber(value));\n            } else {\n                result = result.multiply(radixToPower);\n                result = result.add(Long.fromNumber(value));\n            }\n        }\n        return result;\n    };\n\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n    // no runtime penalty for these.\n    \n    // NOTE: The following constant values are used internally only and are therefore not exposed as properties of the\n    // Long class.\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_16_DBL = 1 << 16;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_24_DBL = 1 << 24;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_31_DBL = TWO_PWR_32_DBL / 2;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_48_DBL = TWO_PWR_32_DBL * TWO_PWR_16_DBL;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n\n    /**\n     * @type {number}\n     */\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n\n    /**\n     * @type {!Long}\n     */\n    var TWO_PWR_24 = Long.fromInt(1 << 24);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.ZERO = Long.fromInt(0);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.ONE = Long.fromInt(1);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.NEG_ONE = Long.fromInt(-1);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_SIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n\n    /**\n     * Alias of {@link Long.MAX_SIGNED_VALUE} for goog.math.Long compatibility.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MAX_VALUE = Long.MAX_SIGNED_VALUE;\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_SIGNED_VALUE = Long.fromBits(0, 0x80000000 | 0, false);\n\n    /**\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_UNSIGNED_VALUE = Long.fromBits(0, 0, true);\n\n    /**\n     * Alias of {@link Long.MIN_SIGNED_VALUE}  for goog.math.Long compatibility.\n     * @type {!Long}\n     * @expose\n     */\n    Long.MIN_VALUE = Long.MIN_SIGNED_VALUE;\n\n    /**\n     * @return {number} The value, assuming it is a 32-bit integer.\n     * @expose\n     */\n    Long.prototype.toInt = function() {\n        return this.unsigned ? this.low >>> 0 : this.low;\n    };\n\n    /**\n     * @return {number} The closest floating-point representation to this value.\n     * @expose\n     */\n    Long.prototype.toNumber = function() {\n        if (this.unsigned) {\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\n        }\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n\n    /**\n     * @param {number=} radix The radix in which the text should be written.\n     * @return {string} The textual representation of this value.\n     * @override\n     * @expose\n     */\n    Long.prototype.toString = function(radix) {\n        radix = radix || 10;\n        if (radix < 2 || 36 < radix) {\n            throw(new Error('radix out of range: ' + radix));\n        }\n        if (this.isZero()) {\n            return '0';\n        }\n        var rem;\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.equals(Long.MIN_SIGNED_VALUE)) {\n                // We need to change the Long value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixLong = Long.fromNumber(radix);\n                var div = this.div(radixLong);\n                rem = div.multiply(radixLong).subtract(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            } else {\n                return '-' + this.negate().toString(radix);\n            }\n        }\n\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower);\n            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n            var digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            } else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }\n                result = '' + digits + result;\n            }\n        }\n    };\n\n    /**\n     * @return {number} The high 32 bits as a signed value.\n     * @expose\n     */\n    Long.prototype.getHighBits = function() {\n        return this.high;\n    };\n\n    /**\n     * @return {number} The high 32 bits as an unsigned value.\n     * @expose\n     */\n    Long.prototype.getHighBitsUnsigned = function() {\n        return this.high >>> 0;\n    };\n\n    /**\n     * @return {number} The low 32 bits as a signed value.\n     * @expose\n     */\n    Long.prototype.getLowBits = function() {\n        return this.low;\n    };\n\n    /**\n     * @return {number} The low 32 bits as an unsigned value.\n     * @expose\n     */\n    Long.prototype.getLowBitsUnsigned = function() {\n        return this.low >>> 0;\n    };\n\n    /**\n     * @return {number} Returns the number of bits needed to represent the absolute\n     *     value of this Long.\n     * @expose\n     */\n    Long.prototype.getNumBitsAbs = function() {\n        if (this.isNegative()) { // Unsigned Longs are never negative\n            if (this.equals(Long.MIN_SIGNED_VALUE)) {\n                return 64;\n            } else {\n                return this.negate().getNumBitsAbs();\n            }\n        } else {\n            var val = this.high != 0 ? this.high : this.low;\n            for (var bit = 31; bit > 0; bit--) {\n                if ((val & (1 << bit)) != 0) {\n                    break;\n                }\n            }\n            return this.high != 0 ? bit + 33 : bit + 1;\n        }\n    };\n\n    /**\n     * @return {boolean} Whether this value is zero.\n     * @expose\n     */\n    Long.prototype.isZero = function() {\n        return this.high == 0 && this.low == 0;\n    };\n\n    /**\n     * @return {boolean} Whether this value is negative.\n     * @expose\n     */\n    Long.prototype.isNegative = function() {\n        return !this.unsigned && this.high < 0;\n    };\n\n    /**\n     * @return {boolean} Whether this value is odd.\n     * @expose\n     */\n    Long.prototype.isOdd = function() {\n        return (this.low & 1) == 1;\n    };\n\n    /**\n     * @return {boolean} Whether this value is even.\n     */\n    Long.prototype.isEven = function() {\n        return (this.low & 1) == 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long equals the other.\n     * @expose\n     */\n    Long.prototype.equals = function(other) {\n        if (this.unsigned != other.unsigned && (this.high >>> 31) != (other.high >>> 31)) return false;\n        return (this.high == other.high) && (this.low == other.low);\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long does not equal the other.\n     * @expose\n     */\n    Long.prototype.notEquals = function(other) {\n        return !this.equals(other);\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is less than the other.\n     * @expose\n     */\n    Long.prototype.lessThan = function(other) {\n        return this.compare(other) < 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is less than or equal to the other.\n     * @expose\n     */\n    Long.prototype.lessThanOrEqual = function(other) {\n        return this.compare(other) <= 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is greater than the other.\n     * @expose\n     */\n    Long.prototype.greaterThan = function(other) {\n        return this.compare(other) > 0;\n    };\n\n    /**\n     * @param {Long} other Long to compare against.\n     * @return {boolean} Whether this Long is greater than or equal to the other.\n     * @expose\n     */\n    Long.prototype.greaterThanOrEqual = function(other) {\n        return this.compare(other) >= 0;\n    };\n\n    /**\n     * Compares this Long with the given one.\n     * @param {Long} other Long to compare against.\n     * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n     *     if the given one is greater.\n     * @expose\n     */\n    Long.prototype.compare = function(other) {\n        if (this.equals(other)) {\n            return 0;\n        }\n        var thisNeg = this.isNegative();\n        var otherNeg = other.isNegative();\n        if (thisNeg && !otherNeg) return -1;\n        if (!thisNeg && otherNeg) return 1;\n        if (!this.unsigned) {\n            // At this point the signs are the same\n            return this.subtract(other).isNegative() ? -1 : 1;\n        } else {\n            // Both are positive if at least one is unsigned\n            return (other.high >>> 0) > (this.high >>> 0) || (other.high == this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\n        }\n    };\n\n    /**\n     * @return {!Long} The negation of this value.\n     * @expose\n     */\n    Long.prototype.negate = function() {\n        if (!this.unsigned && this.equals(Long.MIN_SIGNED_VALUE)) {\n            return Long.MIN_SIGNED_VALUE;\n        }\n        return this.not().add(Long.ONE);\n    };\n\n    /**\n     * Returns the sum of this and the given Long.\n     * @param {Long} other Long to add to this one.\n     * @return {!Long} The sum of this and the given Long.\n     * @expose\n     */\n    Long.prototype.add = function(other) {\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        \n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = other.high >>> 16;\n        var b32 = other.high & 0xFFFF;\n        var b16 = other.low >>> 16;\n        var b00 = other.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 + b48;\n        c48 &= 0xFFFF;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns the difference of this and the given Long.\n     * @param {Long} other Long to subtract from this.\n     * @return {!Long} The difference of this and the given Long.\n     * @expose\n     */\n    Long.prototype.subtract = function(other) {\n        return this.add(other.negate());\n    };\n\n    /**\n     * Returns the product of this and the given long.\n     * @param {Long} other Long to multiply with this.\n     * @return {!Long} The product of this and the other.\n     * @expose\n     */\n    Long.prototype.multiply = function(other) {\n        if (this.isZero()) {\n            return Long.ZERO;\n        } else if (other.isZero()) {\n            return Long.ZERO;\n        }\n\n        if (this.equals(Long.MIN_VALUE)) {\n            return other.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        } else if (other.equals(Long.MIN_VALUE)) {\n            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;\n        }\n\n        if (this.isNegative()) {\n            if (other.isNegative()) {\n                return this.negate().multiply(other.negate());\n            } else {\n                return this.negate().multiply(other).negate();\n            }\n        } else if (other.isNegative()) {\n            return this.multiply(other.negate()).negate();\n        }\n        // If both longs are small, use float multiplication\n        if (this.lessThan(TWO_PWR_24) &&\n            other.lessThan(TWO_PWR_24)) {\n            return Long.fromNumber(this.toNumber() * other.toNumber(), this.unsigned);\n        }\n\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        \n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xFFFF;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xFFFF;\n\n        var b48 = other.high >>> 16;\n        var b32 = other.high & 0xFFFF;\n        var b16 = other.low >>> 16;\n        var b00 = other.low & 0xFFFF;\n\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xFFFF;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xFFFF;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xFFFF;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xFFFF;\n        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\n    };\n\n    /**\n     * Returns this Long divided by the given one.\n     * @param {Long} other Long by which to divide.\n     * @return {!Long} This Long divided by the given one.\n     * @expose\n     */\n    Long.prototype.div = function(other) {\n        if (other.isZero()) {\n            throw(new Error('division by zero'));\n        } else if (this.isZero()) {\n            return Long.ZERO;\n        }\n        if (this.equals(Long.MIN_SIGNED_VALUE)) {\n            if (other.equals(Long.ONE) || other.equals(Long.NEG_ONE)) {\n                return min;  // recall that -MIN_VALUE == MIN_VALUE\n            } else if (other.equals(Long.MIN_VALUE)) {\n                return Long.ONE;\n            } else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = this.shiftRight(1);\n                var approx = halfThis.div(other).shiftLeft(1);\n                if (approx.equals(Long.ZERO)) {\n                    return other.isNegative() ? Long.ONE : Long.NEG_ONE;\n                } else {\n                    var rem = this.subtract(other.multiply(approx));\n                    var result = approx.add(rem.div(other));\n                    return result;\n                }\n            }\n        } else if (other.equals(Long.MIN_VALUE)) {\n            return Long.ZERO;\n        }\n        if (this.isNegative()) {\n            if (other.isNegative()) {\n                return this.negate().div(other.negate());\n            } else {\n                return this.negate().div(other).negate();\n            }\n        } else if (other.isNegative()) {\n            return this.div(other.negate()).negate();\n        }\n\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        var res = Long.ZERO;\n        var rem = this;\n        while (rem.greaterThanOrEqual(other)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            var approxRes = Long.fromNumber(approx, this.unsigned);\n            var approxRem = approxRes.multiply(other);\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n                approx -= delta;\n                approxRes = Long.fromNumber(approx, this.unsigned);\n                approxRem = approxRes.multiply(other);\n            }\n\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) {\n                approxRes = Long.ONE;\n            }\n\n            res = res.add(approxRes);\n            rem = rem.subtract(approxRem);\n        }\n        return res;\n    };\n\n    /**\n     * Returns this Long modulo the given one.\n     * @param {Long} other Long by which to mod.\n     * @return {!Long} This Long modulo the given one.\n     * @expose\n     */\n    Long.prototype.modulo = function(other) {\n        return this.subtract(this.div(other).multiply(other));\n    };\n\n    /**\n     * @return {!Long} The bitwise-NOT of this value.\n     * @expose\n     */\n    Long.prototype.not = function() {\n        return Long.fromBits(~this.low, ~this.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise-AND of this Long and the given one.\n     * @param {Long} other The Long with which to AND.\n     * @return {!Long} The bitwise-AND of this and the other.\n     * @expose\n     */\n    Long.prototype.and = function(other) {\n        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise-OR of this Long and the given one.\n     * @param {Long} other The Long with which to OR.\n     * @return {!Long} The bitwise-OR of this and the other.\n     * @expose\n     */\n    Long.prototype.or = function(other) {\n        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n    };\n\n    /**\n     * Returns the bitwise-XOR of this Long and the given one.\n     * @param {Long} other The Long with which to XOR.\n     * @return {!Long} The bitwise-XOR of this and the other.\n     * @expose\n     */\n    Long.prototype.xor = function(other) {\n        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n    };\n\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param {number} numBits The number of bits by which to shift.\n     * @return {!Long} This shifted to the left by the given amount.\n     * @expose\n     */\n    Long.prototype.shiftLeft = function(numBits) {\n        numBits &= 63;\n        if (numBits == 0) {\n            return this;\n        } else {\n            var low = this.low;\n            if (numBits < 32) {\n                var high = this.high;\n                return Long.fromBits(low << numBits, (high << numBits) | (low >>> (32 - numBits)), this.unsigned);\n            } else {\n                return Long.fromBits(0, low << (numBits - 32), this.unsigned);\n            }\n        }\n    };\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount.\n     * @param {number} numBits The number of bits by which to shift.\n     * @return {!Long} This shifted to the right by the given amount.\n     * @expose\n     */\n    Long.prototype.shiftRight = function(numBits) {\n        numBits &= 63;\n        if (numBits == 0) {\n            return this;\n        } else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >> numBits, this.unsigned);\n            } else {\n                return Long.fromBits(high >> (numBits - 32), high >= 0 ? 0 : -1, this.unsigned);\n            }\n        }\n    };\n\n    /**\n     * Returns this Long with bits shifted to the right by the given amount, with\n     * the new top bits matching the current sign bit.\n     * @param {number} numBits The number of bits by which to shift.\n     * @return {!Long} This shifted to the right by the given amount, with\n     *     zeros placed into the new leading bits.\n     * @expose\n     */\n    Long.prototype.shiftRightUnsigned = function(numBits) {\n        numBits &= 63;\n        if (numBits == 0) {\n            return this;\n        } else {\n            var high = this.high;\n            if (numBits < 32) {\n                var low = this.low;\n                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\n            } else if (numBits == 32) {\n                return Long.fromBits(high, 0, this.unsigned);\n            } else {\n                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);\n            }\n        }\n    };\n\n    /**\n     * @return {!Long} Signed long\n     * @expose\n     */\n    Long.prototype.toSigned = function() {\n        var l = this.clone();\n        l.unsigned = false;\n        return l;\n    };\n\n    /**\n     * @return {!Long} Unsigned long\n     * @expose\n     */\n    Long.prototype.toUnsigned = function() {\n        var l = this.clone();\n        l.unsigned = true;\n        return l;\n    };\n    \n    /**\n     * @return {Long} Cloned instance with the same low/high bits and unsigned flag.\n     * @expose\n     */\n    Long.prototype.clone = function() {\n        return new Long(this.low, this.high, this.unsigned);\n    };\n\n    // Enable module loading if available\n    if (typeof module != 'undefined' && module[\"exports\"]) { // CommonJS\n        module[\"exports\"] = Long;\n    } else if (typeof define != 'undefined' && define[\"amd\"]) { // AMD\n        define(\"Math/Long\", [], function() { return Long; });\n    } else { // Shim\n        if (!global[\"dcodeIO\"]) {\n            global[\"dcodeIO\"] = {};\n        }\n        global[\"dcodeIO\"][\"Long\"] = Long;\n    }\n\n})(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}