{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/web.immediate.js\");\nconst Readable = require('stream').Readable;\nconst ConsumerGroup = require('./consumerGroup');\nconst _ = require('lodash');\nconst logger = require('./logging')('kafka-node:ConsumerGroupStream');\nconst async = require('async');\nconst DEFAULT_HIGH_WATER_MARK = 100;\nconst Denque = require('denque');\nconst DEFAULTS = {\n  autoCommit: true\n};\nfunction convertToCommitPayload(messages) {\n  const ret = [];\n  _.forEach(messages, function (partitionOffset, topic) {\n    _.forEach(partitionOffset, function (offset, partition) {\n      if (offset != null) {\n        ret.push({\n          topic: topic,\n          partition: partition,\n          offset: offset,\n          metadata: 'm'\n        });\n      }\n    });\n  });\n  return ret;\n}\nclass ConsumerGroupStream extends Readable {\n  constructor(options, topics) {\n    super({\n      objectMode: true,\n      highWaterMark: options.highWaterMark || DEFAULT_HIGH_WATER_MARK\n    });\n    _.defaultsDeep(options || {}, DEFAULTS);\n    const self = this;\n    this.autoCommit = options.autoCommit;\n    options.connectOnReady = false;\n    options.autoCommit = false;\n    const originalOnRebalance = options.onRebalance;\n    options.onRebalance = function (isAlreadyMember, callback) {\n      const autoCommit = _.once(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          self.commit(null, true, callback);\n        }\n      });\n      if (typeof originalOnRebalance === 'function') {\n        try {\n          originalOnRebalance(isAlreadyMember, autoCommit);\n        } catch (e) {\n          autoCommit(e);\n        }\n      } else {\n        autoCommit();\n      }\n    };\n    this.consumerGroup = new ConsumerGroup(options, topics);\n    this.messageBuffer = new Denque();\n    this.commitQueue = {};\n    this.consumerGroup.on('error', error => this.emit('error', error));\n    this.consumerGroup.on('connect', () => this.emit('connect'));\n    this.consumerGroup.on('message', message => {\n      this.messageBuffer.push(message);\n      this.consumerGroup.pause();\n    });\n    this.consumerGroup.on('done', message => {\n      setImmediate(() => this.transmitMessages());\n    });\n  }\n  emit(event, value) {\n    if (event === 'data' && this.autoCommit && !_.isEmpty(value)) {\n      setImmediate(() => this.commit(value));\n    }\n    super.emit.apply(this, arguments);\n  }\n  _read() {\n    logger.debug('_read called');\n    if (!this.consumerGroup.ready) {\n      logger.debug('consumerGroup is not ready, calling consumerGroup.connect');\n      this.consumerGroup.connect();\n    }\n    this._reading = true;\n    this.transmitMessages();\n  }\n  commit(message, force, callback) {\n    if (message != null && message.offset !== -1) {\n      _.set(this.commitQueue, [message.topic, message.partition], message.offset + 1);\n    }\n    if (this.committing && !force) {\n      logger.debug('skipping committing');\n      return callback && callback(null);\n    }\n    const commits = convertToCommitPayload(this.commitQueue);\n    this.commitQueued(commits, force, callback);\n  }\n  commitQueued(commits, force, callback) {\n    if (!force) {\n      this.committing = true;\n      this.autoCommitTimer = setTimeout(() => {\n        logger.debug('setting committing to false');\n        this.committing = false;\n        const queuedCommits = convertToCommitPayload(this.commitQueue);\n        if (!_.isEmpty(queuedCommits)) this.commitQueued(queuedCommits);\n      }, this.consumerGroup.options.autoCommitIntervalMs);\n    }\n    if (_.isEmpty(commits)) {\n      logger.debug('commit ignored. no commits to make.');\n      return callback && callback(null);\n    }\n    logger.debug('committing', commits);\n    this.consumerGroup.sendOffsetCommitRequest(commits, error => {\n      if (error) {\n        logger.error('commit request failed', error);\n        if (callback) {\n          return callback(error);\n        }\n        this.emit('error', error);\n        return;\n      }\n      for (let tp of commits) {\n        if (_.get(this.commitQueue, [tp.topic, tp.partition]) === tp.offset) {\n          this.commitQueue[tp.topic][tp.partition] = null;\n        }\n      }\n      callback && callback(null);\n    });\n  }\n  transmitMessages() {\n    while (this._reading && !this.messageBuffer.isEmpty()) {\n      this._reading = this.push(this.messageBuffer.shift());\n    }\n    if (this.messageBuffer.isEmpty() && this._reading) {\n      this.consumerGroup.resume();\n    }\n  }\n  close(callback) {\n    clearTimeout(this.autoCommitTimer);\n    async.series([callback => {\n      if (this.autoCommit) {\n        this.commit(null, true, callback);\n      } else {\n        callback(null);\n      }\n    }, callback => {\n      this.consumerGroup.close(false, () => {\n        callback();\n        this.emit('close');\n      });\n    }], callback || _.noop);\n  }\n  _destroy() {\n    this.close();\n  }\n}\nmodule.exports = ConsumerGroupStream;","map":{"version":3,"names":["require","Readable","ConsumerGroup","_","logger","async","DEFAULT_HIGH_WATER_MARK","Denque","DEFAULTS","autoCommit","convertToCommitPayload","messages","ret","forEach","partitionOffset","topic","offset","partition","push","metadata","ConsumerGroupStream","constructor","options","topics","objectMode","highWaterMark","defaultsDeep","self","connectOnReady","originalOnRebalance","onRebalance","isAlreadyMember","callback","once","err","commit","e","consumerGroup","messageBuffer","commitQueue","on","error","emit","message","pause","setImmediate","transmitMessages","event","value","isEmpty","apply","arguments","_read","debug","ready","connect","_reading","force","set","committing","commits","commitQueued","autoCommitTimer","setTimeout","queuedCommits","autoCommitIntervalMs","sendOffsetCommitRequest","tp","get","shift","resume","close","clearTimeout","series","noop","_destroy","module","exports"],"sources":["D:/Project/VUEJSSPRING_CRUD_JWT/vue-crud-api-jwt-vuex/node_modules/kafka-node/lib/consumerGroupStream.js"],"sourcesContent":["'use strict';\n\nconst Readable = require('stream').Readable;\nconst ConsumerGroup = require('./consumerGroup');\nconst _ = require('lodash');\nconst logger = require('./logging')('kafka-node:ConsumerGroupStream');\nconst async = require('async');\nconst DEFAULT_HIGH_WATER_MARK = 100;\nconst Denque = require('denque');\n\nconst DEFAULTS = {\n  autoCommit: true\n};\n\nfunction convertToCommitPayload (messages) {\n  const ret = [];\n  _.forEach(messages, function (partitionOffset, topic) {\n    _.forEach(partitionOffset, function (offset, partition) {\n      if (offset != null) {\n        ret.push({\n          topic: topic,\n          partition: partition,\n          offset: offset,\n          metadata: 'm'\n        });\n      }\n    });\n  });\n  return ret;\n}\n\nclass ConsumerGroupStream extends Readable {\n  constructor (options, topics) {\n    super({ objectMode: true, highWaterMark: options.highWaterMark || DEFAULT_HIGH_WATER_MARK });\n\n    _.defaultsDeep(options || {}, DEFAULTS);\n    const self = this;\n\n    this.autoCommit = options.autoCommit;\n\n    options.connectOnReady = false;\n    options.autoCommit = false;\n    const originalOnRebalance = options.onRebalance;\n    options.onRebalance = function (isAlreadyMember, callback) {\n      const autoCommit = _.once(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          self.commit(null, true, callback);\n        }\n      });\n      if (typeof originalOnRebalance === 'function') {\n        try {\n          originalOnRebalance(isAlreadyMember, autoCommit);\n        } catch (e) {\n          autoCommit(e);\n        }\n      } else {\n        autoCommit();\n      }\n    };\n\n    this.consumerGroup = new ConsumerGroup(options, topics);\n\n    this.messageBuffer = new Denque();\n    this.commitQueue = {};\n\n    this.consumerGroup.on('error', error => this.emit('error', error));\n    this.consumerGroup.on('connect', () => this.emit('connect'));\n    this.consumerGroup.on('message', message => {\n      this.messageBuffer.push(message);\n      this.consumerGroup.pause();\n    });\n    this.consumerGroup.on('done', message => {\n      setImmediate(() => this.transmitMessages());\n    });\n  }\n\n  emit (event, value) {\n    if (event === 'data' && this.autoCommit && !_.isEmpty(value)) {\n      setImmediate(() => this.commit(value));\n    }\n    super.emit.apply(this, arguments);\n  }\n\n  _read () {\n    logger.debug('_read called');\n    if (!this.consumerGroup.ready) {\n      logger.debug('consumerGroup is not ready, calling consumerGroup.connect');\n      this.consumerGroup.connect();\n    }\n    this._reading = true;\n    this.transmitMessages();\n  }\n\n  commit (message, force, callback) {\n    if (message != null && message.offset !== -1) {\n      _.set(this.commitQueue, [message.topic, message.partition], message.offset + 1);\n    }\n\n    if (this.committing && !force) {\n      logger.debug('skipping committing');\n      return callback && callback(null);\n    }\n\n    const commits = convertToCommitPayload(this.commitQueue);\n    this.commitQueued(commits, force, callback);\n  }\n\n  commitQueued (commits, force, callback) {\n    if (!force) {\n      this.committing = true;\n\n      this.autoCommitTimer = setTimeout(() => {\n        logger.debug('setting committing to false');\n        this.committing = false;\n\n        const queuedCommits = convertToCommitPayload(this.commitQueue);\n        if (!_.isEmpty(queuedCommits)) this.commitQueued(queuedCommits);\n      }, this.consumerGroup.options.autoCommitIntervalMs);\n    }\n\n    if (_.isEmpty(commits)) {\n      logger.debug('commit ignored. no commits to make.');\n      return callback && callback(null);\n    }\n\n    logger.debug('committing', commits);\n\n    this.consumerGroup.sendOffsetCommitRequest(commits, error => {\n      if (error) {\n        logger.error('commit request failed', error);\n        if (callback) {\n          return callback(error);\n        }\n        this.emit('error', error);\n        return;\n      }\n      for (let tp of commits) {\n        if (_.get(this.commitQueue, [tp.topic, tp.partition]) === tp.offset) {\n          this.commitQueue[tp.topic][tp.partition] = null;\n        }\n      }\n      callback && callback(null);\n    });\n  }\n\n  transmitMessages () {\n    while (this._reading && !this.messageBuffer.isEmpty()) {\n      this._reading = this.push(this.messageBuffer.shift());\n    }\n    if (this.messageBuffer.isEmpty() && this._reading) {\n      this.consumerGroup.resume();\n    }\n  }\n\n  close (callback) {\n    clearTimeout(this.autoCommitTimer);\n    async.series(\n      [\n        callback => {\n          if (this.autoCommit) {\n            this.commit(null, true, callback);\n          } else {\n            callback(null);\n          }\n        },\n        callback => {\n          this.consumerGroup.close(false, () => {\n            callback();\n            this.emit('close');\n          });\n        }\n      ],\n      callback || _.noop\n    );\n  }\n\n  _destroy () {\n    this.close();\n  }\n}\n\nmodule.exports = ConsumerGroupStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}